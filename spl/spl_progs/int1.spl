// Code for Interrupt 1

// get the system call number
// it will be stored in location SP - 1
// since code is executing in kernel mode, convert to physical address first

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// find out the system call number

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

// fetch the argument(s) from SP - 2 onwards
// there is only one argument

alias fileName S2;
fileName = [physicalSP - 3];	// note the three, not two

if (sysCallNo == 1) then

	// implementation of Create
	
	// before that check if file has already been created
	
	alias fileCounter S3;
	fileCounter = 0;
	
	// there can be max 64 files
	// each FAT entry takes 8 words
	
	while (fileCounter < 512) do
	
		if ([FAT + fileCounter] == fileName) then
		
			// return after setting status value zero
			// return value is stored in SP - 2
			[physicalSP - 2] = 0;
			
			// return back
			ireturn;
			
		endif;
		
		fileCounter = fileCounter + 8;	
		
	endwhile;
	
	// no such file exists
	// so create it
	
	// search the memory copy of the disk free list
	
	// note that now fileCounter is at 512, which is exactly
	// where Disk Free List begins
	// so simply start searching from there
	// 1024 = 512 + 447
	// 447 because the remaining space is used as swap area
	
	while (fileCounter < 959) do
	
		if ([FAT + fileCounter] == 0) then
		
			// we have space for file
		
			// now search the memory copy of FAT for a free entry
		
			alias FATFreeCounter S4;
			FATFreeCounter = 0;
		
			while (FATFreeCounter < 512) do
		
				if ([FAT + FATFreeCounter + 2] == -1) then
			
					// space for new file found in FAT
				
					// set file name
					[FAT + FATFreeCounter] = fileName;
					// set file size
					[FAT + FATFreeCounter + 1] = 0;
					// set block number of basic block
					[FAT + FATFreeCounter + 2] = fileCounter / 8;
				
					// load the basic block of file to be created
					// use memory page 1 (which was earlier for OS Startup code)
					// because it is no longer required
					load(1, fileCounter / 8);
				
					// set all the words in the basic block to be -1
					alias ctr S5;
					ctr = 512;	// OS Startup code resides in page 1
					
					// 768 = 512 + 256
				
					while (ctr < 768) do
				
						// set the value of each entry in basic block to -1
						[ctr] = -1;
						ctr = ctr + 1;
				
					endwhile;
					
					// nothing done with the header area
				
					// store the basic block residing in the scratchpad back to the disk
					// format of store is store(page_number, block_number);
					store(1, fileCounter / 8);
				
					// set the entry in the disk free list for the basic block to 1
					// this is to indicate that this block has been allocated
					[FAT + fileCounter] = 1;
				
					// store the updated copies of FAT and Disk Free List onto the disk
					// store the FAT
					store(5, 19);
					// store the Disk Free List
					store(6, 20);
				
					// return from the system call with a zero value
				
					[physicalSP - 2] = 0;
					ireturn;
				
				endif;
				
				FATFreeCounter = FATFreeCounter + 8;
		
			endwhile;
		
			if (FATFreeCounter == 512) then
		
				// no space in FAT
				// return with failure
		
				[physicalSP - 2] = -1;
				ireturn;		
		
			endif;
		
		endif;
		
		fileCounter = fileCounter + 1;
	
	endwhile;
	
	if (fileCounter == 959) then
	
		// no space for a new file
		// return with error
		
		[physicalSP - 2] = 0;
		ireturn;
	
	endif;
	
	
endif;

//if (sysCallNo == 4) then

	// implementation of Delete
	
//endif;
