// format of load is load (page_number, block_number); 

// exception handler is stored in blocks 1 and 2 in the disk
// load them to memory blocks 7 and 8
// see memory and disk organization

load(7, 1);
load(8, 2);


// load interrupt routine 7
// I think that's HALT

load(23, 17);
load(24, 18);

// allocate PID of first process which is INIT

[READY_LIST + 0] = 0;

// memory for user processes start at block 25
// INIT code is stored in blocks 21-23 in the disk
// load the code onto memory

load(25,21); 
load(26,22); 
load(27,23); 

// page table for INIT must be set up for 
// address translation scheme to work correctly
// the list of all page tables start at memory address 1024
// page table for each process has 8 words
// so PID x 8 + 1024 gives the physical address of each process table

PTBR = 1024;
PTLR = 4;	// by default

// set up entries for page table
// first word has physical address
// second word has auxiliary information, which is
// referenced? and valid?
// four pages - three for code and one for stack

[PTBR + 0] = 25;
[PTBR + 1] = "01";	// not referenced but valid
[PTBR + 2] = 26;
[PTBR + 3] = "01";
[PTBR + 4] = 27;
[PTBR + 5] = "01";
[PTBR + 6] = 28;	// memory for stack
[PTBR + 7] = "01";

// when there are more than one process in memory, the running process is
// identified by looking at the STATE field in the Ready List of PCBs
// this fact will come in use later

[READY_LIST + 1] = 2; // set the entry for STATE as running

// breakpoints can be used for debugging

// breakpoint;

// the value of SP must be set to its starting logical address,
// which starts form the 3 * 512 = 1536)

SP = 3 * 512;

// every program in memory starts from logical address 0
// so we need IP to point to 0
// but we can't do this explicitly
// but if we put value 0 to the top of the stack,
// IRET will implicitly set IP to this value
// so we need stack of the INIT process to be assigned value 0
// each page is 512 words long, stack starts from page number 28, so

[28 * 512] = 0;

// load interrupt routine 1
// stored in disk blocks 5 and 6
// in memory stored in pages 11 and 12

load(11, 5);
load(12, 6);

// use ireturn to transfer control to user program
// ireturn translates to IRET machine instruction

// again, breakpoints can be used for debugging

// breakpoint;

ireturn;
