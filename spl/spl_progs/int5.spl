// Code for Interrupt 5

// get the system call number
// it will be stored in location SP - 1
// since code is executing in kernel mode, convert to physical address first

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// find out the system call number

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias PID S9;
PID = (PTBR - 1024) / 8;

if (sysCallNo == 8) then

	// implementation of Fork() system call
	
	// find a PCB in the ready list of PCBs
	// newPID is index of the PCB (say PCBIndex)
	alias newPID S2;
	newPID = PID + 1;
	while ((newPID % 32) != PID) do
		//print "loop1";
		if ([READY_LIST + (newPID % 32) * 32 + 1] == 0) then
			break;
		endif;
		newPID = newPID + 1;	
	endwhile;
	
	newPID = newPID % 32;
	
	if (newPID == PID) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	// check if there is one page free in memory
	
	alias counter S4;
	counter = 25;
	
	alias newStackLocation S3;
	
	while (counter < 64) do
		//print "loop 2";
		if (counter == 63) then
			print "counter_63:";
			print [MEM_LIST + counter];
		endif;
		if ([MEM_LIST + counter] == 0) then
			newStackLocation = counter;
			[MEM_LIST + counter] = 1;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	
	if (counter == 64) then
		// no enough memory for even stack
		// return with error
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	print "chose:";
	print newStackLocation;
	print "for stack";
	
	//alias freePageIndex S5;
	alias wordIndex S6;	// to copy from one page to another
	
	// copy the stack
	
	wordIndex = 0;
	while (wordIndex < 512) do
		//print "loop3";
		[newStackLocation * 512 + wordIndex] = [[PTBR + 6] * 512 + wordIndex];
		wordIndex = wordIndex + 1;
	endwhile;
	
	alias childPTBR S7;
	childPTBR = 1024 + newPID * 8;
	
	// set fourth entry of child's PTBR as stack
	[childPTBR + 6] = newStackLocation;
	[childPTBR + 7] = "01";	
	
	// update other entries of child's PTBR
	
	counter = 0;
	
	while (counter < 3) do
		
		//print "loop4";
	
		// copy the entries in the page table of parent's process
		// to that of child's process
		
		[childPTBR + counter * 2] = [PTBR + counter * 2];
		[childPTBR + counter * 2 + 1] = [PTBR + counter * 2 + 1];
		
		// update memory free list to indicate sharing
		
		if ([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then
			[MEM_LIST + [PTBR + counter * 2]] = [MEM_LIST + [PTBR + counter * 2]] + 1;
		endif;
		
		if ([PTBR + counter * 2 + 1] == "00" && [PTBR + counter * 2] > 447) then
			// indicates that code page resides in the disk in the swap area
			// at this block number
			[DISK_LIST + [PTBR + counter * 2]] = [DISK_LIST + [PTBR + counter * 2]] + 1;
			// this is used to indicate that the swap block is now shared by more than one process
			// commit the disk free list back into the disk from memory
			store(6, 20);
		endif;
		
		counter = counter + 1;
		
	endwhile;
	
	// set up entries of the child process' PCB
	
	alias childPCB S10;
	childPCB = childPCB;
	
	// set the PID of the child process to that value
	[childPCB] = newPID;
	
	// set BP
	[childPCB + 2] = BP;
	// set SP
	// SP - 1 is used because the child process does not have the IP stored in its stack
	[childPCB + 3] = SP - 1;
	// set IP
	// same as the IP of parent process because it is logical address
	[childPCB + 4] = [physicalSP];
	// set PTBR
	[childPCB + 5] = childPTBR;
	// set PTLR
	[childPCB + 6] = 4;	
	// set R0 through R7
	[childPCB + 7] = R0;
	[childPCB + 8] = R1;
	[childPCB + 9] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	// set the parent PID
	[childPCB + 31] = PID;
	
	// PPOFT
	
	counter = 0;
	while (counter < 8) do
		//print "loop5";
		//print "step1";
		[childPCB + 15 + counter * 2] = [READY_LIST + PID * 32 + 15 + counter * 2];	// pointer to SWOFT
		//print "step2";
		[childPCB + 15 + counter * 2 + 1] = [READY_LIST + PID * 32 + 15 + counter * 2 + 1];	// LSEEK position
		//print "step3";
		// increment the file open count in SWOFT
		// [READY_LIST + PID * 32 + 15 + counter * 2] is SWOFT Index
		if ([childPCB + 15 + counter * 2] != -1) then
			// entry is valid
			[FILE_TABLE + [childPCB + 15 + counter * 2] * 2 + 1] = [FILE_TABLE + [childPCB + 15 + counter * 2] * 2 + 1] + 1;
		endif;
		//print "step4";
		counter = counter + 1;
	endwhile;
	
	// set STATE of child to READY
	[childPCB + 1] = 1;
	
	// set up return values
	
	// return value for parent is PID of child process
	[physicalSP - 2] = newPID;
	// return value for child is -2
	// but we need to find the physical address of the stack
	alias childPhysicalSP S8;
	childPhysicalSP = ([childPTBR + 2 * ((SP - 1) / 512)] * 512) + ((SP - 1) % 512);
	[childPhysicalSP - 1] = -2;
	
	print "done_fork";
	
	ireturn;
	
endif;