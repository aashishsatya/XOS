// Code for Interrupt 7

// get the system call number
// it will be stored in location SP - 1
// since code is executing in kernel mode, convert to physical address first

print "In INT 7";

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// find out the system call number

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias counter S4;
alias nextPID S2;

alias PID S8;
PID = (PTBR - 1024) / 8;

if (sysCallNo == 10) then
	
	// Exit() needs to signal other processes to wake up
	print "PID_EXIT:";
	print PID;
	counter = 0;
	while (counter < 32) do
		if ([READY_LIST + 32 * counter + 1] == 100 + PID) then
			print "bullseye";
			print counter;
			print (100 + PID);
			[READY_LIST + 32 * counter + 1] = 1;	// set process state to ready
		endif;
		counter = counter + 1;	
	endwhile;
	
endif;

if (sysCallNo == 10 || sysCallNo == 13) then
	
	// common code to reduce code duplication
	
	// search for any ready process in ready list
	
	nextPID = 0;
	while (nextPID < 32) do
		if ([READY_LIST + 32 * nextPID + 1] == 1) then
			break;
		endif;
		nextPID = nextPID + 1;
	endwhile;	
	
endif;

if (sysCallNo == 10) then

	// implementation of Exit()
	
	if (nextPID == 32) then
		// no more processes in ready list
		// simply halt
		halt;
	endif;
	
	// we have a process to be executed
	
	alias currentPCB S3;
	currentPCB = READY_LIST + PID * 32;
	
	// close all open instances of files by current process
		
	counter = 0;
	while (counter < 8) do
		if ([currentPCB + 15 + counter * 2] != -1) then				
			// we have a valid index to SWOFT
			// index into it and decrement file count
			[FILE_TABLE + [currentPCB + 15 + counter * 2] * 2 + 1] = [FILE_TABLE + [currentPCB + 15 + counter * 2] * 2 + 1] - 1;
			if ([FILE_TABLE + [currentPCB + 15 + counter * 2] * 2 + 1] == 0) then				
				// there are no more references to the file
				// invalidate the entry in SWOFT					
				[FILE_TABLE + [currentPCB + 15 + counter * 2] * 2] = -1;
			endif;
			// invalidate the PPOFT by setting fields to -1
			[currentPCB + 15 + counter * 2] = -1;
			[currentPCB + 15 + counter * 2 + 1] = -1;	
		endif;
		counter = counter + 1;
	endwhile;
	
	// set state as terminated
	[currentPCB + 1] = 0;
	
	// free the entries of the page table
	counter = 0;
	while (counter < 4) do
		if ([PTBR + counter * 2] == -1) then
			// already invalid
			counter = counter + 1;
			continue;
		endif;
		// valid page table
		// set memory location as free in memory list
		[MEM_LIST + [PTBR + counter * 2]] = 0;
		// invalidate entries in PTBR
		[PTBR + counter * 2] = -1;
		// set auxiliary info to not valid
		[PTBR + counter * 2 + 1] = "00";
		counter = counter + 1;
	endwhile;	

endif;

if (sysCallNo == 13) then
	
	// implementation of Wait() system call
	
	// get the PID of the process to be waited for
	alias waitingPID S7;
	waitingPID = [physicalSP - 3];
	
	// check if the process we're waiting for is running or terminated
	if ([READY_LIST + 32 * waitingPID + 1] == 0 || [READY_LIST + 32 * waitingPID + 1] == 2) then
		// error, process is waiting for itself
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	// change the STATE field of the current process to 100 + waitingPID
	print "changed";
	print "state of";
	print PID;
	print "to";
	print (100 + waitingPID);
	[READY_LIST + PID * 32 + 1] = 100 + waitingPID;
	
endif;

if (sysCallNo == 10 || sysCallNo == 13) then

	// find and set up the next ready process
	// required PID will be stored in nextPID
	
	// we've already found out the next 'ready' process
	// load its context as in timer.spl (copied)
	
	alias newPCB S5;
	newPCB = READY_LIST + nextPID * 32;
	
	// set the values of SP and BP
	BP = [newPCB + 2];
	SP = [newPCB + 3];	
		
	// set PTBR and PTLR
	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];
		
	// set the value of registers R0 - R7
	R0 = [newPCB + 7];
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];
		
	// set the IP field		
	// but you can't directly manipulate IP
	// we need the execution to start from IP for which you have to put it on top
	// of the stack of the new process
	// think about it -- after an interrupt routine has finished execution, we
	// pop off the IP value from the stack of the current process (the process that caused
	// the exception) and then continue executing it
	// here the two processes -- the one before and after the interrupt, are obviously different
	// clever but complicated exploitation of the interrupt mechanism
	
	SP = SP + 1;
	alias newPhysicalSP S6;
	newPhysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[newPhysicalSP] = [newPCB + 4];
	
	// set the state field of the new process to running
	[newPCB + 1] = 2;
	
endif;

print "sysCallNo:";
print sysCallNo;
print "PID_EXIT2:";
print PID;
ireturn;