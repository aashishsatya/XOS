// Code for Interrupt 6

// get the system call number
// it will be stored in location SP - 1
// since code is executing in kernel mode, convert to physical address first

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// find out the system call number

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

// fetch the argument(s) from SP - 2 onwards
// there is only one argument

alias fileName S2;
fileName = [physicalSP - 3];	// note the three, not two

alias PID S8;
PID = (PTBR - 1024) / 8;

alias currentPCB S9;
currentPCB = READY_LIST + 32 * PID;

alias counter S3;

if (sysCallNo == 9) then

	// Exec() system call
	
	// check if file exists
	
	alias FATIndex S4;
	FATIndex = 0;
	
	// there can be max 64 files
	// each FAT entry takes 8 words	
	while (FATIndex < 64) do	
		if ([FAT + FATIndex * 8] == fileName) then
			break;			
		endif;		
		FATIndex = FATIndex + 1;	
	endwhile;
	
	if (FATIndex == 64) then	
		// file does not exist			
		[physicalSP - 2] = -1;
		ireturn;	
	endif;	
	
	// count the number of code blocks of the new program
	alias countCodeBlocksNew S5;
	countCodeBlocksNew = [FAT + FATIndex * 8 + 1];	// size
	countCodeBlocksNew = countCodeBlocksNew / 512;	// size by 512 gives number of pages
	
	if (countCodeBlocksNew > 3) then
		// invalid file, program can have only three pages of code
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	// allocate new pages
	
	// but first check if there's enough space in memory free list
	
	// but before checking set the pages used by the current process as free
	// (as these will also be available)
	
	counter = 0;
	while (counter < 3) do
		if ([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then
			// page is currently being used
			// set it as free in memory free list
			[MEM_LIST + [PTBR + counter * 2]] = 0;
		endif;
		counter = counter + 1;
	endwhile;
	
	// now check for free pages
	
	alias newPagesCount S7;
	newPagesCount = countCodeBlocksNew;
	counter = 25;
	while (counter < 64) do
		if ([MEM_LIST + counter] == 0) then
			newPagesCount = newPagesCount - 1;
			if (newPagesCount == 0) then
				break;
			endif;
		endif;
		counter = counter + 1;
	endwhile;
	
	if (counter == 64) then
		// not enough memory
		// so set the pages used by the current process back as used in the 
		// memory free list
		counter = 0;	// NOTE: COUNTER IS BEING MODIFIED!!
		while (counter < 3) do
			[MEM_LIST + [PTBR + counter * 2 + 1]] = 1;
			counter = counter + 1;
		endwhile;
		// return signaling error
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	// we have enough memory, so we can safely deallocate old pages
	
	counter = 0;
	
	while (counter < 3) do
	
		if ([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then
			// update entry in memory list (already done)
			// update entry in PTBR
			[PTBR + counter * 2 + 1] = "00";
			[PTBR + counter * 2] = -1;
		endif;
		
		counter = counter + 1;
		
	endwhile;
	
	// now allot new memory for page table
		
	newPagesCount = 0;
	counter = 25;
		
	while (counter < 64 && newPagesCount < countCodeBlocksNew) do
	
		if ([MEM_LIST + counter] == 1) then	// block already used
			counter = counter + 1;
			continue;
		endif;
			
		// unused block, allocate
			
		[MEM_LIST + counter] = 1;
		[PTBR + newPagesCount * 2] = counter;
		[PTBR + newPagesCount * 2 + 1] = "01";
			
		newPagesCount = newPagesCount + 1;					
		counter = counter + 1;
			
	endwhile;
	
	// load the basic block onto the OS scratchpad
	load(1, [FAT + FATIndex * 8 + 2]);
		
	// required pages have been allocated
	// load the blocks of the program into pages of the current process
		
	counter = 0;
	while (counter < countCodeBlocksNew) do
		load([PTBR + counter * 2], [SCRATCHPAD + counter]);
		counter = counter + 1;
	endwhile;
		
	// close all files opened by the current process
		
	counter = 0;
	while (counter < 8) do
		if ([currentPCB + 15 + counter * 2] != -1) then				
			// we have a valid index to SWOFT
			// index into it and decrement file count
			[FILE_TABLE + [currentPCB + 15 + counter * 2] * 2 + 1] = [FILE_TABLE + [currentPCB + 15 + counter * 2] * 2 + 1] - 1;
			if ([FILE_TABLE + [currentPCB + 15 + counter * 2] * 2 + 1] == 0) then				
				// there are no more references to the file
				// invalidate the entry in SWOFT					
				[FILE_TABLE + [currentPCB + 15 + counter * 2] * 2] = -1;
			endif;
			// invalidate the PPOFT by setting fields to -1
			[currentPCB + 15 + counter * 2] = -1;
			[currentPCB + 15 + counter * 2 + 1] = -1;	
		endif;
		counter = counter + 1;
	endwhile;
		
	// reset SP to 3 * 512
	SP = 3 * 512;
		
	// store zero on top of the stack
	physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[physicalSP] = 0;
	
	ireturn;	// WHAT ABOUT THE RETURN VALUE?

endif;

if (sysCallNo == 11) then
	
	// implementation of Getpid() system call
	
	[physicalSP - 2] = (PTBR - 1024) / 8;
	ireturn;	// WHAT'S THE CASE FOR FAILURE?
	
endif;

if (sysCallNo == 12) then
	
	// validate parent entry (can it ever be otherwise?)
	if ([currentPCB + 31] < 0 || [currentPCB + 31] > 31) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	[physicalSP - 2] = [currentPCB + 31];
	ireturn;
	
endif;